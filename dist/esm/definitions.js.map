{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from \"@capacitor/core\";\n\nexport interface uploadOption {\n  /**\n   * @since 0.0.1\n   * @description The file path of the file to upload\n   */\n  filePath: string;\n  /**\n   * @since 0.0.1\n   * @description The url of the server\n   */\n  serverUrl: string;\n  /**\n   * @since 0.0.1\n   * @default 'Uploading'\n   * @description The title of the notification\n   * Android only\n   */\n  notificationTitle?: number;\n  /**\n   * @since 0.0.1\n   * @description The headers to send with the request\n   */\n  headers: {\n    [key: string]: string;\n  };\n  /**\n   * @since 0.0.1\n   * @description The method to use for the request\n   * @default 'POST'\n   */\n  method?: \"PUT\" | \"POST\";\n  /**\n   * @since 0.0.1\n   * @description The mime type to use for the request\n   */\n  mimeType?: string;\n  /**\n   * @since 0.0.1\n   * @description The parameters to send with the request\n   */\n  parameters?: { [key: string]: string };\n  /**\n   * @since 0.0.1\n   * @description The maximum number of retries\n   */\n  maxRetries?: number;\n}\nexport interface UploadEvent {\n  /**\n   * Current status of upload, between 0 and 100.\n   *\n   * @since 0.0.1\n   */\n  name: \"uploading\" | \"completed\" | \"failed\";\n  /**\n   * @since 0.0.1\n   * @description The payload of the event\n   * @default { percent: 0, error: '', statusCode: 0 }\n   */\n  payload: {\n    /**\n     * @since 0.0.1\n     * @description The percent of the upload\n     */\n    percent?: number;\n    /**\n     * @since 0.0.1\n     * @description The error of the upload\n     */\n    error?: string;\n    /**\n     * @since 0.0.1\n     * @description The status code of the upload\n     */\n    statusCode?: number;\n  };\n  /**\n   * @since 0.0.1\n   * @description The id of the upload\n   */\n  id: string;\n}\n\nexport interface UploaderPlugin {\n  /**\n   * @since 0.0.1\n   * @description Start the upload\n   * @param options uploadOption\n   * @returns { id: string }\n   */\n  startUpload(options: uploadOption): Promise<{ id: string }>;\n  /**\n   * @since 0.0.1\n   * @description Remove the upload\n   * @param options\n   * @returns { void }\n   */\n  removeUpload(options: { id: string }): Promise<void>;\n  /**\n   * @since 0.0.1\n   * @description Add a listener for the upload events\n   * @param eventName\n   * @param listenerFunc\n   * @returns { PluginListenerHandle }\n   */\n  addListener(\n    eventName: \"events\",\n    listenerFunc: (state: UploadEvent) => void,\n  ): Promise<PluginListenerHandle>;\n}\n"]}